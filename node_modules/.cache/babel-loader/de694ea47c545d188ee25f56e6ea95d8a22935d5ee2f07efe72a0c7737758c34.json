{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KAY\\\\Desktop\\\\versified-password\\\\react-password-generator\\\\src\\\\components\\\\generator.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { toast, ToastContainer } from 'react-toastify';\nimport './generator.css';\nimport { numbers, upperCaseLetters, lowerCaseLetters, specialCharacters } from './characters';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { COPY_SUCCESS } from './message.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Generator() {\n  _s();\n  const [password, setPassword] = useState('');\n  const [passwordLength, setPasswordLength] = useState(20);\n  const [includeUppercase, setIncludeUppercase] = useState(false);\n  const [includeLowercase, setIncludeLowercase] = useState(false);\n  const [includeNumbers, setIncludeNumbers] = useState(false);\n  const [includeSymbols, setIncludeSymbols] = useState(false);\n  const handleGeneratePassword = e => {\n    if (!includeUppercase && !includeLowercase && !includeNumbers && !includeSymbols) {\n      notify('You must Select atleast one option', true);\n    }\n    let characterList = '';\n    if (includeLowercase) {\n      characterList = characterList + lowerCaseLetters;\n    }\n    if (includeUppercase) {\n      characterList = characterList + upperCaseLetters;\n    }\n    if (includeNumbers) {\n      characterList = characterList + numbers;\n    }\n    if (includeSymbols) {\n      characterList = characterList + specialCharacters;\n    }\n    setPassword(createPassword(characterList));\n  };\n  const createPassword = characterList => {\n    let password = '';\n    const characterListLength = characterList.length;\n    for (let i = 0; i < passwordLength; i++) {\n      const characterIndex = Math.round(Math.random() * characterListLength);\n      password = password + characterList.charAt(characterIndex);\n    }\n    return password;\n  };\n  const copyToClipboard = () => {\n    const newTextArea = document.createElement('textarea');\n    newTextArea.innerText = password;\n    document.body.appendChild(newTextArea);\n    newTextArea.select();\n    document.execCommand('copy');\n    newTextArea.remove();\n  };\n  const notify = function (message) {\n    let hasError = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (hasError) {\n      toast.error(message, {\n        position: 'top-center',\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined\n      });\n    } else {\n      toast(message, {\n        position: 'top-center',\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined\n      });\n    }\n  };\n  const handleCopyPassword = e => {\n    if (password === '') {\n      notify('Nothing To Copy', true);\n    } else {\n      copyToClipboard();\n      notify(COPY_SUCCESS);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n_s(Generator, \"aCwhZ2LcgqZFLQ/eW0UCy/gXVTw=\");\n_c = Generator;\nexport default Generator;\nvar _c;\n$RefreshReg$(_c, \"Generator\");","map":{"version":3,"names":["React","useState","toast","ToastContainer","numbers","upperCaseLetters","lowerCaseLetters","specialCharacters","COPY_SUCCESS","Generator","password","setPassword","passwordLength","setPasswordLength","includeUppercase","setIncludeUppercase","includeLowercase","setIncludeLowercase","includeNumbers","setIncludeNumbers","includeSymbols","setIncludeSymbols","handleGeneratePassword","e","notify","characterList","createPassword","characterListLength","length","i","characterIndex","Math","round","random","charAt","copyToClipboard","newTextArea","document","createElement","innerText","body","appendChild","select","execCommand","remove","message","hasError","error","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","handleCopyPassword"],"sources":["C:/Users/KAY/Desktop/versified-password/react-password-generator/src/components/generator.jsx"],"sourcesContent":["import React, { useState } from 'react'\r\nimport { toast, ToastContainer } from 'react-toastify'\r\nimport './generator.css'\r\nimport {\r\n  numbers,\r\n  upperCaseLetters,\r\n  lowerCaseLetters,\r\n  specialCharacters,\r\n} from './characters'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport { COPY_SUCCESS } from './message.js'\r\n\r\nfunction Generator() {\r\n  const [password, setPassword] = useState('')\r\n  const [passwordLength, setPasswordLength] = useState(20)\r\n  const [includeUppercase, setIncludeUppercase] = useState(false)\r\n  const [includeLowercase, setIncludeLowercase] = useState(false)\r\n  const [includeNumbers, setIncludeNumbers] = useState(false)\r\n  const [includeSymbols, setIncludeSymbols] = useState(false)\r\n\r\n  const handleGeneratePassword = (e) => {\r\n    if (\r\n      !includeUppercase &&\r\n      !includeLowercase &&\r\n      !includeNumbers &&\r\n      !includeSymbols\r\n    ) {\r\n      notify('You must Select atleast one option', true)\r\n    }\r\n    let characterList = ''\r\n\r\n    if (includeLowercase) {\r\n      characterList = characterList + lowerCaseLetters\r\n    }\r\n\r\n    if (includeUppercase) {\r\n      characterList = characterList + upperCaseLetters\r\n    }\r\n\r\n    if (includeNumbers) {\r\n      characterList = characterList + numbers\r\n    }\r\n\r\n    if (includeSymbols) {\r\n      characterList = characterList + specialCharacters\r\n    }\r\n\r\n    setPassword(createPassword(characterList))\r\n  }\r\n  const createPassword = (characterList) => {\r\n    let password = ''\r\n    const characterListLength = characterList.length\r\n\r\n    for (let i = 0; i < passwordLength; i++) {\r\n      const characterIndex = Math.round(Math.random() * characterListLength)\r\n      password = password + characterList.charAt(characterIndex)\r\n    }\r\n    return password\r\n  }\r\n\r\n  const copyToClipboard = () => {\r\n    const newTextArea = document.createElement('textarea')\r\n    newTextArea.innerText = password\r\n    document.body.appendChild(newTextArea)\r\n    newTextArea.select()\r\n    document.execCommand('copy')\r\n    newTextArea.remove()\r\n  }\r\n\r\n  const notify = (message, hasError = false) => {\r\n    if (hasError) {\r\n      toast.error(message, {\r\n        position: 'top-center',\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      })\r\n    } else {\r\n      toast(message, {\r\n        position: 'top-center',\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      })\r\n    }\r\n  }\r\n\r\n  const handleCopyPassword = (e) => {\r\n    if (password === '') {\r\n      notify('Nothing To Copy', true)\r\n    } else {\r\n      copyToClipboard()\r\n      notify(COPY_SUCCESS)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='App'>\r\n      <div className='container'>\r\n        \r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Generator\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,KAAK,EAAEC,cAAc,QAAQ,gBAAgB;AACtD,OAAO,iBAAiB;AACxB,SACEC,OAAO,EACPC,gBAAgB,EAChBC,gBAAgB,EAChBC,iBAAiB,QACZ,cAAc;AACrB,OAAO,uCAAuC;AAC9C,SAASC,YAAY,QAAQ,cAAc;AAAA;AAE3C,SAASC,SAAS,GAAG;EAAA;EACnB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACW,cAAc,EAAEC,iBAAiB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACa,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAC/D,MAAM,CAACe,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EAC/D,MAAM,CAACiB,cAAc,EAAEC,iBAAiB,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAACmB,cAAc,EAAEC,iBAAiB,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EAE3D,MAAMqB,sBAAsB,GAAIC,CAAC,IAAK;IACpC,IACE,CAACT,gBAAgB,IACjB,CAACE,gBAAgB,IACjB,CAACE,cAAc,IACf,CAACE,cAAc,EACf;MACAI,MAAM,CAAC,oCAAoC,EAAE,IAAI,CAAC;IACpD;IACA,IAAIC,aAAa,GAAG,EAAE;IAEtB,IAAIT,gBAAgB,EAAE;MACpBS,aAAa,GAAGA,aAAa,GAAGnB,gBAAgB;IAClD;IAEA,IAAIQ,gBAAgB,EAAE;MACpBW,aAAa,GAAGA,aAAa,GAAGpB,gBAAgB;IAClD;IAEA,IAAIa,cAAc,EAAE;MAClBO,aAAa,GAAGA,aAAa,GAAGrB,OAAO;IACzC;IAEA,IAAIgB,cAAc,EAAE;MAClBK,aAAa,GAAGA,aAAa,GAAGlB,iBAAiB;IACnD;IAEAI,WAAW,CAACe,cAAc,CAACD,aAAa,CAAC,CAAC;EAC5C,CAAC;EACD,MAAMC,cAAc,GAAID,aAAa,IAAK;IACxC,IAAIf,QAAQ,GAAG,EAAE;IACjB,MAAMiB,mBAAmB,GAAGF,aAAa,CAACG,MAAM;IAEhD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjB,cAAc,EAAEiB,CAAC,EAAE,EAAE;MACvC,MAAMC,cAAc,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGN,mBAAmB,CAAC;MACtEjB,QAAQ,GAAGA,QAAQ,GAAGe,aAAa,CAACS,MAAM,CAACJ,cAAc,CAAC;IAC5D;IACA,OAAOpB,QAAQ;EACjB,CAAC;EAED,MAAMyB,eAAe,GAAG,MAAM;IAC5B,MAAMC,WAAW,GAAGC,QAAQ,CAACC,aAAa,CAAC,UAAU,CAAC;IACtDF,WAAW,CAACG,SAAS,GAAG7B,QAAQ;IAChC2B,QAAQ,CAACG,IAAI,CAACC,WAAW,CAACL,WAAW,CAAC;IACtCA,WAAW,CAACM,MAAM,EAAE;IACpBL,QAAQ,CAACM,WAAW,CAAC,MAAM,CAAC;IAC5BP,WAAW,CAACQ,MAAM,EAAE;EACtB,CAAC;EAED,MAAMpB,MAAM,GAAG,UAACqB,OAAO,EAAuB;IAAA,IAArBC,QAAQ,uEAAG,KAAK;IACvC,IAAIA,QAAQ,EAAE;MACZ5C,KAAK,CAAC6C,KAAK,CAACF,OAAO,EAAE;QACnBG,QAAQ,EAAE,YAAY;QACtBC,SAAS,EAAE,IAAI;QACfC,eAAe,EAAE,KAAK;QACtBC,YAAY,EAAE,IAAI;QAClBC,YAAY,EAAE,IAAI;QAClBC,SAAS,EAAE,IAAI;QACfC,QAAQ,EAAEC;MACZ,CAAC,CAAC;IACJ,CAAC,MAAM;MACLrD,KAAK,CAAC2C,OAAO,EAAE;QACbG,QAAQ,EAAE,YAAY;QACtBC,SAAS,EAAE,IAAI;QACfC,eAAe,EAAE,KAAK;QACtBC,YAAY,EAAE,IAAI;QAClBC,YAAY,EAAE,IAAI;QAClBC,SAAS,EAAE,IAAI;QACfC,QAAQ,EAAEC;MACZ,CAAC,CAAC;IACJ;EACF,CAAC;EAED,MAAMC,kBAAkB,GAAIjC,CAAC,IAAK;IAChC,IAAIb,QAAQ,KAAK,EAAE,EAAE;MACnBc,MAAM,CAAC,iBAAiB,EAAE,IAAI,CAAC;IACjC,CAAC,MAAM;MACLW,eAAe,EAAE;MACjBX,MAAM,CAAChB,YAAY,CAAC;IACtB;EACF,CAAC;EAED,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,uBAClB;MAAK,SAAS,EAAC;IAAW;MAAA;MAAA;MAAA;IAAA;EAEpB;IAAA;IAAA;IAAA;EAAA,QACF;AAEV;AAAC,GAjGQC,SAAS;AAAA,KAATA,SAAS;AAmGlB,eAAeA,SAAS;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}