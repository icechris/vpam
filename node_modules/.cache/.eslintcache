[{"C:\\Users\\KAY\\Desktop\\versified-password\\react-password-generator\\src\\index.js":"1","C:\\Users\\KAY\\Desktop\\versified-password\\react-password-generator\\src\\App.js":"2","C:\\Users\\KAY\\Desktop\\versified-password\\react-password-generator\\src\\reportWebVitals.js":"3","C:\\Users\\KAY\\Desktop\\versified-password\\react-password-generator\\src\\pages\\dashboard.jsx":"4","C:\\Users\\KAY\\Desktop\\versified-password\\react-password-generator\\src\\components\\generator.jsx":"5","C:\\Users\\KAY\\Desktop\\versified-password\\react-password-generator\\src\\components\\characters.js":"6","C:\\Users\\KAY\\Desktop\\versified-password\\react-password-generator\\src\\components\\table.jsx":"7","C:\\Users\\KAY\\Desktop\\versified-password\\react-password-generator\\src\\pages\\loginForm.jsx":"8","C:\\Users\\KAY\\Desktop\\versified-password\\react-password-generator\\src\\pages\\register.jsx":"9","C:\\Users\\KAY\\Desktop\\versified-password\\react-password-generator\\src\\pages\\house.jsx":"10","C:\\Users\\KAY\\Desktop\\versified-password\\react-password-generator\\src\\pages\\number.jsx":"11"},{"size":626,"mtime":1672953787226,"results":"12","hashOfConfig":"13"},{"size":502,"mtime":1675778963977,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1671779563275,"results":"15","hashOfConfig":"13"},{"size":1301,"mtime":1676449922192,"results":"16","hashOfConfig":"13"},{"size":6355,"mtime":1674305034112,"results":"17","hashOfConfig":"13"},{"size":234,"mtime":1673214250949,"results":"18","hashOfConfig":"13"},{"size":913,"mtime":1676382020041,"results":"19","hashOfConfig":"13"},{"size":936,"mtime":1676408283687,"results":"20","hashOfConfig":"13"},{"size":1857,"mtime":1676464545290,"results":"21","hashOfConfig":"13"},{"size":874,"mtime":1676449804822,"results":"22","hashOfConfig":"13"},{"size":1951,"mtime":1676463953555,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"lss7cw",{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"27"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"27"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"27"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"27"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\KAY\\Desktop\\versified-password\\react-password-generator\\src\\index.js",[],[],[],"C:\\Users\\KAY\\Desktop\\versified-password\\react-password-generator\\src\\App.js",["62"],[],"import React, {useState}  from 'react';\nimport { Routes, Route } from 'react-router-dom'\nimport Dashboard from './pages/dashboard'\n\n\nfunction App() {\n\n  \n  return (\n    <div className='App'>\n    <Routes>\n      <Route path='/' \n       element={<h1>Hello</h1>}/>\n      <Route path='/dashboard' element={<Dashboard/>} />\n      {/* <Route path='/loginForm' element={<LoginForm/>} /> */}\n      {/* <Route path='/register' element={<Register/>} /> */}\n    </Routes>\n   \n    </div>\n  );\n}\n\nexport default App\n","C:\\Users\\KAY\\Desktop\\versified-password\\react-password-generator\\src\\reportWebVitals.js",[],[],"C:\\Users\\KAY\\Desktop\\versified-password\\react-password-generator\\src\\pages\\dashboard.jsx",["63","64","65","66"],[],"import { useState } from 'react' \r\nimport Generator from '../components/generator'\r\nimport Table from '../components/table'\r\nimport './dashboard.css'\r\nimport LoginForm from './loginForm'\r\nimport Register from './register'\r\nimport House from './house'\r\nimport Phone from './number'\r\n\r\n\r\nconst userData = [\r\n    { desc: \"new password\", pass:\"23rhfutdj\"},\r\n    { desc: \"vault pass\", pass:\"986598896\"},\r\n]\r\n\r\nfunction Dashboard() {\r\n  const [showGenerator, setShowGenerator] = useState(false)\r\n  const[showHouse, setShowHouse] = useState(false);\r\n  const [data, setData]= useState({});\r\n\r\n \r\n \r\n  const toggleForm = (state,data) => {\r\n    console.log(data);\r\n    setShowHouse(state);\r\n    setData(data);\r\n  }  \r\n \r\n\r\n  const close = () => setShowGenerator(false)\r\n\r\n  return (\r\n    <div className='dashboard'>\r\n        <div className=\"top\">\r\n            <button className='btn' onClick={() => setShowGenerator(true)}>Generate</button>\r\n            <input placeholder=\"Search\" className='search' aria-describedby=\"button-addon3\" />\r\n        </div>\r\n        <Table data={userData} toggleForm={toggleForm} />\r\n        { showGenerator && <Generator close={close}/> } \r\n\r\n         {\r\n            showHouse && <House toggleForm={toggleForm}/>\r\n         }\r\n   \r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default Dashboard\r\n","C:\\Users\\KAY\\Desktop\\versified-password\\react-password-generator\\src\\components\\generator.jsx",["67","68"],[],"import React, { useState } from 'react'\r\nimport { toast, ToastContainer } from 'react-toastify'\r\nimport './generator.css'\r\nimport {\r\n  numbers,\r\n  upperCaseLetters,\r\n  lowerCaseLetters,\r\n  specialCharacters,\r\n} from './characters'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\n// import { COPY_SUCCESS } from './message.js'\r\n\r\nfunction Generator({ close }) {\r\n  const [password, setPassword] = useState('')\r\n  const [passwordLength, setPasswordLength] = useState(20)\r\n  const [includeUppercase, setIncludeUppercase] = useState(false)\r\n  const [includeLowercase, setIncludeLowercase] = useState(false)\r\n  const [includeNumbers, setIncludeNumbers] = useState(false)\r\n  const [includeSymbols, setIncludeSymbols] = useState(false)\r\n\r\n  const handleGeneratePassword = (e) => {\r\n    if (\r\n      !includeUppercase &&\r\n      !includeLowercase &&\r\n      !includeNumbers &&\r\n      !includeSymbols\r\n    ) {\r\n      notify('You must Select atleast one option', true)\r\n    }\r\n    let characterList = ''\r\n\r\n    if (includeLowercase) {\r\n      characterList = characterList + lowerCaseLetters\r\n    }\r\n\r\n    if (includeUppercase) {\r\n      characterList = characterList + upperCaseLetters\r\n    }\r\n\r\n    if (includeNumbers) {\r\n      characterList = characterList + numbers\r\n    }\r\n\r\n    if (includeSymbols) {\r\n      characterList = characterList + specialCharacters\r\n    }\r\n\r\n    setPassword(createPasswordNew())\r\n  }\r\n  const createPassword = (characterList) => {\r\n    let password = ''\r\n    const characterListLength = characterList.length\r\n\r\n    for (let i = 0; i < passwordLength; i++) {\r\n      \r\n      const characterIndex = Math.round(Math.random() * characterListLength)\r\n      password = password + characterList.charAt(characterIndex)\r\n    }\r\n    return password\r\n  }\r\n\r\n  const shufflePassword = (password)  => {\r\n    let shuffledPassword = \"\"\r\n    let passwordText = password.split(\"\")\r\n    while(passwordText.length > 0) {\r\n      shuffledPassword += passwordText.splice(passwordText.length * Math.random() << 0, 1)\r\n    }\r\n    console.log(shuffledPassword)\r\n\r\n    return shuffledPassword.substring(0,passwordLength)\r\n  }\r\n\r\n  const createPasswordNew = () => {\r\n    let password = \"\"\r\n    for(let i=0; i<passwordLength;i++) {\r\n      if(includeLowercase){\r\n        const characterIndex = Math.round(Math.random() * lowerCaseLetters.length)\r\n        password = password + lowerCaseLetters.charAt(characterIndex)\r\n      }\r\n\r\n      if(includeUppercase){\r\n        const characterIndex = Math.round(Math.random() * upperCaseLetters.length)\r\n        password = password + upperCaseLetters.charAt(characterIndex)\r\n      }\r\n\r\n      if(includeNumbers){\r\n        const characterIndex = Math.round(Math.random() * numbers.length)\r\n        password = password + numbers.charAt(characterIndex)\r\n      }\r\n\r\n      if(includeSymbols){\r\n        const characterIndex = Math.round(Math.random() * specialCharacters.length)\r\n        password = password + specialCharacters.charAt(characterIndex)\r\n      }\r\n    }\r\n\r\n    return shufflePassword(password)\r\n  }\r\n\r\n  const notify = (message, hasError = false) => {\r\n    if (hasError) {\r\n      toast.error(message, {\r\n        position: 'top-center',\r\n        autoClose: 5000,\r\n          hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      })\r\n    } else {\r\n      toast(message, {\r\n        position: 'top-center',\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      })\r\n    }\r\n  }\r\n\r\n  \r\n\r\n  return (\r\n    <div className='generator'>\r\n    <span className='close' onClick={() => close()}>&times;</span>\r\n    <h2 className='generator__header'>Password Generator</h2>\r\n    <div className='generator__password'>\r\n      <h3>{password}</h3>\r\n      \r\n    </div>\r\n\r\n    <div className='form-group'>\r\n      <label htmlFor='password-strength'>Password length(from 7-20)</label>\r\n      <input\r\n        defaultValue={passwordLength}\r\n        onChange={(e) => setPasswordLength(e.target.value)}\r\n        type='number'\r\n        id='password-strength'\r\n        name='password-strength'\r\n        max='20'\r\n        min='7'\r\n      />\r\n    </div>\r\n    <div className='form-group'>\r\n    \r\n      <label htmlFor='description'>Password Description</label>\r\n      <input\r\n      \r\n        type='text'\r\n        id='password-description'\r\n        name='password-description'\r\n      \r\n      />\r\n    </div>\r\n\r\n    <div className='form-group'>\r\n      <label htmlFor='uppercase-letters'>Include Uppercase Letters</label>\r\n      <input\r\n        checked={includeUppercase}\r\n        onChange={(e) => setIncludeUppercase(e.target.checked)}\r\n        type='checkbox'\r\n        id='uppercase-letters'\r\n        name='uppercase-letters'\r\n      />\r\n    </div>\r\n\r\n    <div className='form-group'>\r\n      <label htmlFor='lowercase-letters'>Include Lowercase Letters</label>\r\n      <input\r\n        checked={includeLowercase}\r\n        onChange={(e) => setIncludeLowercase(e.target.checked)}\r\n        type='checkbox'\r\n        id='lowercase-letters'\r\n        name='lowercase-letters'\r\n      />\r\n    </div>\r\n\r\n    <div className='form-group'>\r\n      <label htmlFor='include-numbers'>Include Numbers</label>\r\n      <input\r\n        checked={includeNumbers}\r\n        onChange={(e) => setIncludeNumbers(e.target.checked)}\r\n        type='checkbox'\r\n        id='include-numbers'\r\n        name='include-numbers'\r\n      />\r\n    </div>\r\n\r\n    <div className='form-group'>\r\n      <label htmlFor='include-symbols'>Include Symbols</label>\r\n      <input\r\n        checked={includeSymbols}\r\n        onChange={(e) => setIncludeSymbols(e.target.checked)}\r\n        type='checkbox'\r\n        id='include-symbols'\r\n        name='include-symbols'\r\n      />\r\n    </div>\r\n\r\n    <button onClick={handleGeneratePassword} className='generator__btn'>\r\n      Generate Password\r\n    </button>\r\n    <button   className ='save__btn'>\r\n      Save password\r\n     </button> \r\n    <div>\r\n    \r\n    \r\n    </div>\r\n   \r\n    <ToastContainer\r\n      position='top-center'\r\n      autoClose={5000}\r\n      hideProgressBar={false}\r\n      newestOnTop={false}\r\n      closeOnClick\r\n      rtl={false}\r\n      pauseOnFocusLoss\r\n      draggable\r\n      pauseOnHover\r\n    />\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default Generator\r\n","C:\\Users\\KAY\\Desktop\\versified-password\\react-password-generator\\src\\components\\characters.js",[],[],"C:\\Users\\KAY\\Desktop\\versified-password\\react-password-generator\\src\\components\\table.jsx",[],[],"C:\\Users\\KAY\\Desktop\\versified-password\\react-password-generator\\src\\pages\\loginForm.jsx",["69","70"],[],"import React, {useState} from \"react\"\r\nimport './loginForm.css'\r\n\r\nexport const  LoginForm = (props) => {\r\n\r\nconst[token, setToken]  = useState('');\r\nconst[email, setEmail]  = useState('');\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst handleSubmit = (e) => {\r\ne.preventDefault();\r\n\tconsole.log(token);\r\n\r\n}\r\n    return (\r\n\t\t<div>\r\n\t\t\t<h2 className=\"head-text\"> Check your email/phone for verification </h2>\r\n\t\t\t<form className=\"login-form\" onSubmit={handleSubmit}>\r\n\t\t\t<label htmlFor=\"token\">Token</label>\r\n\t\t\t<input value={token} onChange={(e) => setToken(e.target.value)}  type=\"text\" placeholder=\"Enter token to view\" id=\"token\" name=\"token\"></input>\r\n\t\t\t<button className=\"verify-btn\" type=\"submit\" onClick={() =>  props.onFormSwitch(\"./dashboard.jsx\")}>Verify</button>\r\n\t\t\t</form>\r\n\t\t\t{/* <button className=\"click-btn\" onClick={() =>  props.onFormSwitch(\"Register\")}>Don't have a token? Click here</button> */}\r\n\t\t</div>\r\n    )\r\n}\r\nexport default LoginForm;","C:\\Users\\KAY\\Desktop\\versified-password\\react-password-generator\\src\\pages\\register.jsx",["71","72","73","74"],[],"C:\\Users\\KAY\\Desktop\\versified-password\\react-password-generator\\src\\pages\\house.jsx",[],[],"C:\\Users\\KAY\\Desktop\\versified-password\\react-password-generator\\src\\pages\\number.jsx",["75","76","77","78"],[],{"ruleId":"79","severity":1,"message":"80","line":1,"column":16,"nodeType":"81","messageId":"82","endLine":1,"endColumn":24},{"ruleId":"79","severity":1,"message":"83","line":5,"column":8,"nodeType":"81","messageId":"82","endLine":5,"endColumn":17},{"ruleId":"79","severity":1,"message":"84","line":6,"column":8,"nodeType":"81","messageId":"82","endLine":6,"endColumn":16},{"ruleId":"79","severity":1,"message":"85","line":8,"column":8,"nodeType":"81","messageId":"82","endLine":8,"endColumn":13},{"ruleId":"79","severity":1,"message":"86","line":19,"column":10,"nodeType":"81","messageId":"82","endLine":19,"endColumn":14},{"ruleId":"79","severity":1,"message":"87","line":45,"column":7,"nodeType":"81","messageId":"82","endLine":45,"endColumn":20},{"ruleId":"79","severity":1,"message":"88","line":50,"column":9,"nodeType":"81","messageId":"82","endLine":50,"endColumn":23},{"ruleId":"79","severity":1,"message":"89","line":7,"column":7,"nodeType":"81","messageId":"82","endLine":7,"endColumn":12},{"ruleId":"79","severity":1,"message":"90","line":7,"column":14,"nodeType":"81","messageId":"82","endLine":7,"endColumn":22},{"ruleId":"79","severity":1,"message":"91","line":8,"column":9,"nodeType":"81","messageId":"82","endLine":8,"endColumn":14},{"ruleId":"79","severity":1,"message":"92","line":8,"column":16,"nodeType":"81","messageId":"82","endLine":8,"endColumn":24},{"ruleId":"79","severity":1,"message":"90","line":9,"column":16,"nodeType":"81","messageId":"82","endLine":9,"endColumn":24},{"ruleId":"79","severity":1,"message":"93","line":12,"column":11,"nodeType":"81","messageId":"82","endLine":12,"endColumn":23},{"ruleId":"79","severity":1,"message":"92","line":7,"column":18,"nodeType":"81","messageId":"82","endLine":7,"endColumn":26},{"ruleId":"79","severity":1,"message":"89","line":8,"column":11,"nodeType":"81","messageId":"82","endLine":8,"endColumn":16},{"ruleId":"79","severity":1,"message":"90","line":8,"column":18,"nodeType":"81","messageId":"82","endLine":8,"endColumn":26},{"ruleId":"79","severity":1,"message":"93","line":12,"column":11,"nodeType":"81","messageId":"82","endLine":12,"endColumn":23},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'LoginForm' is defined but never used.","'Register' is defined but never used.","'Phone' is defined but never used.","'data' is assigned a value but never used.","'characterList' is assigned a value but never used.","'createPassword' is assigned a value but never used.","'email' is assigned a value but never used.","'setEmail' is assigned a value but never used.","'phone' is assigned a value but never used.","'setPhone' is assigned a value but never used.","'handleSubmit' is assigned a value but never used."]